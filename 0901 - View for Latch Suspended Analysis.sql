/*============================================================================
	File:		0901 - View for Latch Suspended Analysis.sql

	Summary:	This script extracts the Latch Contention out of the Extended Event
				file which is generated by the script:
				0003 - XEvent for high transactional processes!

				THIS SCRIPT IS PART OF THE TRACK:
				"Database Partitioning"

	Date:		December 2020

	SQL Server Version: 2012 / 2014 / 2016 / 2017 / 2019
------------------------------------------------------------------------------
	Written by Uwe Ricken, db Berater GmbH

	This script is intended only as a supplement to demos and lectures
	given by Uwe Ricken.  
  
	THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF 
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED 
	TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
============================================================================*/
DROP TABLE IF EXISTS #EventData
GO

SELECT	CAST(event_Data AS xml) AS StatementData
INTO	#EventData
FROM	sys.fn_xe_file_target_read_file
		('T:\TraceFiles\0110*.xel', NULL, NULL, NULL);
GO

WITH XE
AS
(
	SELECT	StatementData.value('(event/@timestamp)[1]','datetime')								AS	[time],
			StatementData.value('(event/@name)[1]', 'VARCHAR(128)')								AS	[event_name],
			StatementData.value('(event/data[@name="mode"]/text)[1]','CHAR(2)')					AS	[latch_mode],
			StatementData.value('(event/data[@name="duration"]/value)[1]','int')				AS	[duration],
			StatementData.value('(event/data[@name="page_id"]/value)[1]','int')					AS	[page_id],
			StatementData.value('(event/data[@name="page_type_id"]/text)[1]','VARCHAR(64)')		AS	[page_type]
	FROM	#EventData
)
SELECT	XE.page_type,
		XE.latch_mode,
		COUNT_BIG(*)				AS	latch_count,
		SUM(XE.duration / 1000.0)	AS	sum_duration_ms,
		AVG(XE.duration / 1000.0)	AS	avg_duration_ms
FROM	XE
WHERE	XE.event_name = N'latch_suspend_end'
		AND page_type <> N'invalid'
GROUP BY
		XE.latch_mode,
		XE.page_type
ORDER BY
		[page_type] ASC;
GO